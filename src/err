Using built-in specs.
Using built-in specs.
COLLECT_GCC=g++
COLLECT_GCC=g++
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/lto-wrapper
Target: x86_64-unknown-linux-gnu
Configured with: /build/gcc-multilib/src/gcc-5.2.0/configure --prefix=/usr --libdir=/usr/lib --libexecdir=/usr/lib --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=https://bugs.archlinux.org/ --enable-languages=c,c++,ada,fortran,go,lto,objc,obj-c++ --enable-shared --enable-threads=posix --enable-libmpx --with-system-zlib --with-isl --enable-__cxa_atexit --disable-libunwind-exceptions --enable-clocale=gnu --disable-libstdcxx-pch --disable-libssp --enable-gnu-unique-object --enable-linker-build-id --enable-lto --enable-plugin --enable-install-libiberty --with-linker-hash-style=gnu --enable-gnu-indirect-function --enable-multilib --disable-werror --enable-checking=release --with-default-libstdcxx-abi=gcc4-compatible
Thread model: posix
gcc version 5.2.0 (GCC) 
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/lto-wrapper
Target: x86_64-unknown-linux-gnu
Configured with: /build/gcc-multilib/src/gcc-5.2.0/configure --prefix=/usr --libdir=/usr/lib --libexecdir=/usr/lib --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=https://bugs.archlinux.org/ --enable-languages=c,c++,ada,fortran,go,lto,objc,obj-c++ --enable-shared --enable-threads=posix --enable-libmpx --with-system-zlib --with-isl --enable-__cxa_atexit --disable-libunwind-exceptions --enable-clocale=gnu --disable-libstdcxx-pch --disable-libssp --enable-gnu-unique-object --enable-linker-build-id --enable-lto --enable-plugin --enable-install-libiberty --with-linker-hash-style=gnu --enable-gnu-indirect-function --enable-multilib --disable-werror --enable-checking=release --with-default-libstdcxx-abi=gcc4-compatible
Thread model: posix
gcc version 5.2.0 (GCC) 
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE main.cpp -quiet -dumpbase main.cpp -mtune=generic -march=x86-64 -auxbase main -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE main.cpp -quiet -dumpbase main.cpp -mtune=generic -march=x86-64 -auxbase main -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
Compiler executable checksum: Compiler executable checksum: 18422b8e6e00646fd4f8fbf484d27148
18422b8e6e00646fd4f8fbf484d27148
In file included from zxelem.hpp:5:0,
                 from fpxelem.hpp:8,
                 from main.cpp:9:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from zxelem.hpp:5:0,
                 from fpxelem.hpp:8,
                 from main.cpp:9:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from fpxelem.hpp:8:0,
                 from main.cpp:9:
zxelem.hpp:30:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const big_int unit(const Zxelem &e);
                                   ^
In file included from fpxelem.hpp:8:0,
                 from main.cpp:9:
zxelem.hpp:30:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const big_int unit(const Zxelem &e);
                                   ^
main.cpp: In function ‘int main()’:
main.cpp:35:36: error: could not convert ‘5’ from ‘int’ to ‘Fpxelem’
  if (HenselLifting(a, 5, u, w, b, c)){
                                    ^
main.cpp: In function ‘int main()’:
main.cpp:35:36: error: could not convert ‘5’ from ‘int’ to ‘Fpxelem’
  if (HenselLifting(a, 5, u, w, b, c)){
                                    ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from main.cpp:9:
polRing.hpp: In instantiation of ‘std::string to_string(const Zxelem&)’:
polRing.hpp:303:35:   required from ‘std::ostream& operator<<(std::ostream&, const Zxelem&)’
main.cpp:36:20:   required from here
polRing.hpp:284:24: error: conversion to ‘std::vector<long long int, std::allocator<long long int> >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                 if(f._v[i] != 0){
                        ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from main.cpp:9:
polRing.hpp: In instantiation of ‘std::string to_string(const Zxelem&)’:
polRing.hpp:303:35:   required from ‘std::ostream& operator<<(std::ostream&, const Zxelem&)’
main.cpp:36:20:   required from here
polRing.hpp:284:24: error: conversion to ‘std::vector<long long int, std::allocator<long long int> >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                 if(f._v[i] != 0){
                        ^
polRing.hpp:286:28: error: conversion to ‘std::vector<long long int, std::allocator<long long int> >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                     if(f._v[i] != 1)
                            ^
polRing.hpp:287:44: error: conversion to ‘std::vector<long long int, std::allocator<long long int> >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                         s += to_string(f._v[i]);
                                            ^
polRing.hpp:286:28: error: conversion to ‘std::vector<long long int, std::allocator<long long int> >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                     if(f._v[i] != 1)
                            ^
polRing.hpp:287:44: error: conversion to ‘std::vector<long long int, std::allocator<long long int> >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                         s += to_string(f._v[i]);
                                            ^
cc1plus: all warnings being treated as errors
cc1plus: all warnings being treated as errors
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE generalPurpose.cpp -quiet -dumpbase generalPurpose.cpp -mtune=generic -march=x86-64 -auxbase generalPurpose -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE generalPurpose.cpp -quiet -dumpbase generalPurpose.cpp -mtune=generic -march=x86-64 -auxbase generalPurpose -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
Compiler executable checksum: Compiler executable checksum: 18422b8e6e00646fd4f8fbf484d27148
18422b8e6e00646fd4f8fbf484d27148
In file included from generalPurpose.cpp:4:0:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from generalPurpose.cpp:4:0:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from fpxelem.hpp:8:0,
                 from generalPurpose.cpp:5:
zxelem.hpp:30:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const big_int unit(const Zxelem &e);
                                   ^
In file included from fpxelem.hpp:8:0,
                 from generalPurpose.cpp:5:
zxelem.hpp:30:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const big_int unit(const Zxelem &e);
                                   ^
generalPurpose.cpp: In function ‘bool millerRabin(big_int, int)’:
generalPurpose.cpp:69:6: error: no previous declaration for ‘bool millerRabin(big_int, int)’ [-Werror=missing-declarations]
 bool millerRabin(big_int n, int k /*= 35*/){
      ^
generalPurpose.cpp: In function ‘bool millerRabin(big_int, int)’:
generalPurpose.cpp:69:6: error: no previous declaration for ‘bool millerRabin(big_int, int)’ [-Werror=missing-declarations]
 bool millerRabin(big_int n, int k /*= 35*/){
      ^
generalPurpose.cpp: In function ‘long long int pollardRhoBrent(long long int)’:
generalPurpose.cpp:221:11: error: no previous declaration for ‘long long int pollardRhoBrent(long long int)’ [-Werror=missing-declarations]
 long long pollardRhoBrent (long long n){
           ^
generalPurpose.cpp: In function ‘long long int pollardRhoBrent(long long int)’:
generalPurpose.cpp:221:11: error: no previous declaration for ‘long long int pollardRhoBrent(long long int)’ [-Werror=missing-declarations]
 long long pollardRhoBrent (long long n){
           ^
generalPurpose.cpp: In function ‘bool pollardRhoLogarithm(long long int, long long int, long long int, long long int&)’:
generalPurpose.cpp:234:6: error: no previous declaration for ‘bool pollardRhoLogarithm(long long int, long long int, long long int, long long int&)’ [-Werror=missing-declarations]
 bool pollardRhoLogarithm(long long g, long long h, long long n, long long & log){
      ^
generalPurpose.cpp: In function ‘bool pollardRhoLogarithm(long long int, long long int, long long int, long long int&)’:
generalPurpose.cpp:234:6: error: no previous declaration for ‘bool pollardRhoLogarithm(long long int, long long int, long long int, long long int&)’ [-Werror=missing-declarations]
 bool pollardRhoLogarithm(long long g, long long h, long long n, long long & log){
      ^
generalPurpose.cpp: In lambda function:
generalPurpose.cpp:238:15: error: switch missing default case [-Werror=switch-default]
         switch(x%3){
               ^
generalPurpose.cpp: In lambda function:
generalPurpose.cpp:238:15: error: switch missing default case [-Werror=switch-default]
         switch(x%3){
               ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from generalPurpose.cpp:5:
polRing.hpp: In instantiation of ‘std::string to_string(const Fpxelem&)’:
polRing.hpp:93:112:   required from ‘Fxelem& PolynomialRing<Fxelem, Felem>::operator*=(const Fxelem&) [with Fxelem = Fpxelem; Felem = Fpelem]’
polRing.hpp:108:62:   required from ‘const Fxelem PolynomialRing<Fxelem, Felem>::operator*(const Fxelem&) const [with Fxelem = Fpxelem; Felem = Fpelem]’
generalPurpose.cpp:32:23:   required from ‘T fastPowMod(const T&, U, const T&) [with T = Fpxelem; U = long long int]’
generalPurpose.cpp:262:93:   required from here
polRing.hpp:284:24: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                 if(f._v[i] != 0){
                        ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from generalPurpose.cpp:5:
polRing.hpp: In instantiation of ‘std::string to_string(const Fpxelem&)’:
polRing.hpp:93:112:   required from ‘Fxelem& PolynomialRing<Fxelem, Felem>::operator*=(const Fxelem&) [with Fxelem = Fpxelem; Felem = Fpelem]’
polRing.hpp:108:62:   required from ‘const Fxelem PolynomialRing<Fxelem, Felem>::operator*(const Fxelem&) const [with Fxelem = Fpxelem; Felem = Fpelem]’
generalPurpose.cpp:32:23:   required from ‘T fastPowMod(const T&, U, const T&) [with T = Fpxelem; U = long long int]’
generalPurpose.cpp:262:93:   required from here
polRing.hpp:284:24: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                 if(f._v[i] != 0){
                        ^
polRing.hpp:286:28: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                     if(f._v[i] != 1)
                            ^
polRing.hpp:287:44: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                         s += to_string(f._v[i]);
                                            ^
polRing.hpp:286:28: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                     if(f._v[i] != 1)
                            ^
polRing.hpp:287:44: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                         s += to_string(f._v[i]);
                                            ^
polRing.hpp: In instantiation of ‘std::string to_string(const Fqxelem&)’:
polRing.hpp:116:109:   required from ‘std::pair<_FIter, _FIter> PolynomialRing<Fxelem, Felem>::div2(const Fxelem&) const [with Fxelem = Fqxelem; Felem = Fqelem]’
polRing.hpp:166:19:   required from ‘Fxelem& PolynomialRing<Fxelem, Felem>::operator%=(const Fxelem&) [with Fxelem = Fqxelem; Felem = Fqelem]’
generalPurpose.cpp:170:11:   required from ‘T gcd(T, T) [with T = Fqxelem]’
generalPurpose.cpp:272:51:   required from here
polRing.hpp:284:24: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                 if(f._v[i] != 0){
                        ^
polRing.hpp: In instantiation of ‘std::string to_string(const Fqxelem&)’:
polRing.hpp:116:109:   required from ‘std::pair<_FIter, _FIter> PolynomialRing<Fxelem, Felem>::div2(const Fxelem&) const [with Fxelem = Fqxelem; Felem = Fqelem]’
polRing.hpp:166:19:   required from ‘Fxelem& PolynomialRing<Fxelem, Felem>::operator%=(const Fxelem&) [with Fxelem = Fqxelem; Felem = Fqelem]’
generalPurpose.cpp:170:11:   required from ‘T gcd(T, T) [with T = Fqxelem]’
generalPurpose.cpp:272:51:   required from here
polRing.hpp:284:24: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                 if(f._v[i] != 0){
                        ^
polRing.hpp:286:28: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                     if(f._v[i] != 1)
                            ^
polRing.hpp:287:44: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                         s += to_string(f._v[i]);
                                            ^
polRing.hpp:286:28: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                     if(f._v[i] != 1)
                            ^
polRing.hpp:287:44: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                         s += to_string(f._v[i]);
                                            ^
cc1plus: all warnings being treated as errors
cc1plus: all warnings being treated as errors
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE fpelem.cpp -quiet -dumpbase fpelem.cpp -mtune=generic -march=x86-64 -auxbase fpelem -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE fpelem.cpp -quiet -dumpbase fpelem.cpp -mtune=generic -march=x86-64 -auxbase fpelem -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
Compiler executable checksum: Compiler executable checksum: 18422b8e6e00646fd4f8fbf484d27148
18422b8e6e00646fd4f8fbf484d27148
In file included from fpelem.cpp:3:0:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from fpelem.cpp:3:0:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
cc1plus: all warnings being treated as errors
cc1plus: all warnings being treated as errors
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE fp.cpp -quiet -dumpbase fp.cpp -mtune=generic -march=x86-64 -auxbase fp -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE fp.cpp -quiet -dumpbase fp.cpp -mtune=generic -march=x86-64 -auxbase fp -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
Compiler executable checksum: 18422b8e6e00646fd4f8fbf484d27148
Compiler executable checksum: 18422b8e6e00646fd4f8fbf484d27148
In file included from fp.cpp:5:0:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from fp.cpp:5:0:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
cc1plus: all warnings being treated as errors
cc1plus: all warnings being treated as errors
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE factorizationFq.cpp -quiet -dumpbase factorizationFq.cpp -mtune=generic -march=x86-64 -auxbase factorizationFq -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE factorizationFq.cpp -quiet -dumpbase factorizationFq.cpp -mtune=generic -march=x86-64 -auxbase factorizationFq -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
Compiler executable checksum: 18422b8e6e00646fd4f8fbf484d27148
Compiler executable checksum: 18422b8e6e00646fd4f8fbf484d27148
In file included from zxelem.hpp:5:0,
                 from fpxelem.hpp:8,
                 from factorizationFq.cpp:7:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from zxelem.hpp:5:0,
                 from fpxelem.hpp:8,
                 from factorizationFq.cpp:7:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from fpxelem.hpp:8:0,
                 from factorizationFq.cpp:7:
zxelem.hpp:30:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const big_int unit(const Zxelem &e);
                                   ^
In file included from fpxelem.hpp:8:0,
                 from factorizationFq.cpp:7:
zxelem.hpp:30:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const big_int unit(const Zxelem &e);
                                   ^
factorizationFq.cpp: In function ‘void fastPowModPol(Fxelem&, big_int, std::vector<_RealType>, int)’:
factorizationFq.cpp:185:41: error: use of old-style cast [-Werror=old-style-cast]
     for (int i = 0; i <= (int)(aux.deg())-deg; ++i){//aux.deg is always <= 2*deg-2
                                         ^
factorizationFq.cpp: In function ‘void fastPowModPol(Fxelem&, big_int, std::vector<_RealType>, int)’:
factorizationFq.cpp:185:41: error: use of old-style cast [-Werror=old-style-cast]
     for (int i = 0; i <= (int)(aux.deg())-deg; ++i){//aux.deg is always <= 2*deg-2
                                         ^
factorizationFq.cpp:193:39: error: use of old-style cast [-Werror=old-style-cast]
     for (int i = 0; i <= (int)(a.deg())-deg; ++i){//a.deg is always <= 2*deg-2
                                       ^
factorizationFq.cpp:198:41: error: use of old-style cast [-Werror=old-style-cast]
     for (int i = 0; i <= (int)(aux.deg())-deg; ++i){//aux.deg is always <= 2*deg-2
                                         ^
factorizationFq.cpp:193:39: error: use of old-style cast [-Werror=old-style-cast]
     for (int i = 0; i <= (int)(a.deg())-deg; ++i){//a.deg is always <= 2*deg-2
                                       ^
factorizationFq.cpp:198:41: error: use of old-style cast [-Werror=old-style-cast]
     for (int i = 0; i <= (int)(aux.deg())-deg; ++i){//aux.deg is always <= 2*deg-2
                                         ^
factorizationFq.cpp: In function ‘std::vector<std::vector<typename Fxelem::Felem, std::allocator<typename Fxelem::Felem> >, std::allocator<std::vector<typename Fxelem::Felem, std::allocator<typename Fxelem::Felem> > > > kernelBasis(matrix<typename Fxelem::Felem>&)’:
factorizationFq.cpp:332:36: error: use of old-style cast [-Werror=old-style-cast]
   for (i = k; i < n && mat[(size_t)k][i] == 0 ; ++i);
                                    ^
factorizationFq.cpp: In function ‘std::vector<std::vector<typename Fxelem::Felem, std::allocator<typename Fxelem::Felem> >, std::allocator<std::vector<typename Fxelem::Felem, std::allocator<typename Fxelem::Felem> > > > kernelBasis(matrix<typename Fxelem::Felem>&)’:
factorizationFq.cpp:332:36: error: use of old-style cast [-Werror=old-style-cast]
   for (i = k; i < n && mat[(size_t)k][i] == 0 ; ++i);
                                    ^
factorizationFq.cpp: In function ‘std::vector<_RealType> berlekamp_simple(const Fxelem&)’:
factorizationFq.cpp:412:26: error: use of old-style cast [-Werror=old-style-cast]
    Fxelem v(base[(size_t)r]);
                          ^
factorizationFq.cpp: In function ‘std::vector<_RealType> berlekamp_simple(const Fxelem&)’:
factorizationFq.cpp:412:26: error: use of old-style cast [-Werror=old-style-cast]
    Fxelem v(base[(size_t)r]);
                          ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::pair<Fxelem, unsigned int> > squareFreeFF(Fxelem) [with Fxelem = Fpxelem]’:
factorizationFq.cpp:460:82:   required from here
factorizationFq.cpp:86:22: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
    for (int j = 0; j <= c.deg(); j+=p )
                      ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::pair<Fxelem, unsigned int> > squareFreeFF(Fxelem) [with Fxelem = Fpxelem]’:
factorizationFq.cpp:460:82:   required from here
factorizationFq.cpp:86:22: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
    for (int j = 0; j <= c.deg(); j+=p )
                      ^
factorizationFq.cpp:109:21: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
   for (int j = 0; j <= a.deg(); j+=p )
                     ^
factorizationFq.cpp:109:21: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
   for (int j = 0; j <= a.deg(); j+=p )
                     ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::pair<Fxelem, unsigned int> > partialFactorDD(Fxelem) [with Fxelem = Fpxelem]’:
factorizationFq.cpp:461:87:   required from here
factorizationFq.cpp:136:18: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int n = pol.deg();
                  ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::pair<Fxelem, unsigned int> > partialFactorDD(Fxelem) [with Fxelem = Fpxelem]’:
factorizationFq.cpp:461:87:   required from here
factorizationFq.cpp:136:18: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int n = pol.deg();
                  ^
factorizationFq.cpp:155:6: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] = aux[0]*mat[0][j] ;
      ^
factorizationFq.cpp:155:6: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] = aux[0]*mat[0][j] ;
      ^
factorizationFq.cpp:155:25: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] = aux[0]*mat[0][j] ;
                         ^
factorizationFq.cpp:157:6: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
      ^
factorizationFq.cpp:157:16: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
                ^
factorizationFq.cpp:157:23: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
                       ^
factorizationFq.cpp:157:26: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
                          ^
factorizationFq.cpp:155:25: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] = aux[0]*mat[0][j] ;
                         ^
factorizationFq.cpp:157:6: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
      ^
factorizationFq.cpp:157:16: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
                ^
factorizationFq.cpp:157:23: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
                       ^
factorizationFq.cpp:157:26: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
                          ^
factorizationFq.cpp: In instantiation of ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fpxelem]’:
factorizationFq.cpp:462:74:   required from here
factorizationFq.cpp:228:23: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int polDeg = pol.deg();
                       ^
factorizationFq.cpp: In instantiation of ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fpxelem]’:
factorizationFq.cpp:462:74:   required from here
factorizationFq.cpp:228:23: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int polDeg = pol.deg();
                       ^
factorizationFq.cpp:237:74: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   std::vector<typename Fxelem::Felem> r(2*polDeg-1, pol.getField().get(0));
                                                                          ^
factorizationFq.cpp:237:74: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   std::vector<typename Fxelem::Felem> r(2*polDeg-1, pol.getField().get(0));
                                                                          ^
factorizationFq.cpp:238:3: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
  r[polDeg-1] = 1; //r == (0, 0, ..., 1)
   ^
factorizationFq.cpp:241:15: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   auto aux = r[polDeg-1];
               ^
factorizationFq.cpp:243:5: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
     ^
factorizationFq.cpp:238:3: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
  r[polDeg-1] = 1; //r == (0, 0, ..., 1)
   ^
factorizationFq.cpp:241:15: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   auto aux = r[polDeg-1];
               ^
factorizationFq.cpp:243:5: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
     ^
factorizationFq.cpp:243:12: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
            ^
factorizationFq.cpp:246:4: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   r[i] = -1;
    ^
factorizationFq.cpp:243:12: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
            ^
factorizationFq.cpp:246:4: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   r[i] = -1;
    ^
factorizationFq.cpp:248:4: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   r[i] = 0;
    ^
factorizationFq.cpp:248:4: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   r[i] = 0;
    ^
factorizationFq.cpp:258:28: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
     for (int i = polDeg; i <= aux.deg(); ++i){//aux.deg is always <= 2*polDeg-2
                            ^
factorizationFq.cpp:258:28: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
     for (int i = polDeg; i <= aux.deg(); ++i){//aux.deg is always <= 2*polDeg-2
                            ^
factorizationFq.cpp:260:34: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       aux += Fxelem(aux[i])*pwrsX[i-polDeg];
                                  ^
factorizationFq.cpp:260:34: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       aux += Fxelem(aux[i])*pwrsX[i-polDeg];
                                  ^
factorizationFq.cpp:266:26: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
    fastPowModPol<Fxelem> (v, (fastPow(pol.getField().getSize(), n) -1)/2, pwrsX, pol.deg());
                          ^
factorizationFq.cpp:266:26: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
    fastPowModPol<Fxelem> (v, (fastPow(pol.getField().getSize(), n) -1)/2, pwrsX, pol.deg());
                          ^
factorizationFq.cpp: In instantiation of ‘Fxelem randomPol(const typename Fxelem::F&, int) [with Fxelem = Fpxelem; typename Fxelem::F = Fp]’:
factorizationFq.cpp:463:73:   required from here
factorizationFq.cpp:213:87: error: conversion to ‘std::mersenne_twister_engine<long unsigned int, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::result_type {aka long unsigned int}’ from ‘std::chrono::duration<long int, std::ratio<1l, 1000000000l> >::rep {aka long int}’ may change the sign of the result [-Werror=sign-conversion]
  std::mt19937_64 generator(std::chrono::system_clock::now().time_since_epoch().count());
                                                                                       ^
factorizationFq.cpp: In instantiation of ‘Fxelem randomPol(const typename Fxelem::F&, int) [with Fxelem = Fpxelem; typename Fxelem::F = Fp]’:
factorizationFq.cpp:463:73:   required from here
factorizationFq.cpp:213:87: error: conversion to ‘std::mersenne_twister_engine<long unsigned int, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::result_type {aka long unsigned int}’ from ‘std::chrono::duration<long int, std::ratio<1l, 1000000000l> >::rep {aka long int}’ may change the sign of the result [-Werror=sign-conversion]
  std::mt19937_64 generator(std::chrono::system_clock::now().time_since_epoch().count());
                                                                                       ^
factorizationFq.cpp:216:3: error: conversion to ‘big_int {aka long long int}’ from ‘std::mersenne_twister_engine<long unsigned int, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::result_type {aka long unsigned int}’ may change the sign of the result [-Werror=sign-conversion]
   r.push_back(field.get(generator()));
   ^
factorizationFq.cpp:216:3: error: conversion to ‘big_int {aka long long int}’ from ‘std::mersenne_twister_engine<long unsigned int, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::result_type {aka long unsigned int}’ may change the sign of the result [-Werror=sign-conversion]
   r.push_back(field.get(generator()));
   ^
factorizationFq.cpp: In instantiation of ‘std::vector<_RealType> berlekamp_simple(const Fxelem&) [with Fxelem = Fpxelem]’:
factorizationFq.cpp:464:69:   required from here
factorizationFq.cpp:405:18: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int n = pol.deg();
                  ^
factorizationFq.cpp: In instantiation of ‘std::vector<_RealType> berlekamp_simple(const Fxelem&) [with Fxelem = Fpxelem]’:
factorizationFq.cpp:464:69:   required from here
factorizationFq.cpp:405:18: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int n = pol.deg();
                  ^
factorizationFq.cpp:407:6: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
      ^
factorizationFq.cpp:407:6: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
      ^
factorizationFq.cpp:407:9: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
         ^
factorizationFq.cpp:407:9: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
         ^
factorizationFq.cpp:410:24: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
  while (factors.size() < k){
                        ^
factorizationFq.cpp:410:24: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
  while (factors.size() < k){
                        ^
factorizationFq.cpp:411:21: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
   for (int i = 0; i < factors.size(); ++i){
                     ^
factorizationFq.cpp:411:21: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
   for (int i = 0; i < factors.size(); ++i){
                     ^
factorizationFq.cpp:414:32: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     Fxelem g = gcd(v-s, factors[i]);
                                ^
factorizationFq.cpp:414:32: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     Fxelem g = gcd(v-s, factors[i]);
                                ^
factorizationFq.cpp:415:31: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     if (g != 1 && g != factors[i]){
                               ^
factorizationFq.cpp:415:31: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     if (g != 1 && g != factors[i]){
                               ^
factorizationFq.cpp:416:13: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      factors[i]/=g; //We continue in the loop with the new factors[i] because it is a divisor of the old factors[i] so it is not necessary to check the previous s and r.
             ^
factorizationFq.cpp:416:13: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      factors[i]/=g; //We continue in the loop with the new factors[i] because it is a divisor of the old factors[i] so it is not necessary to check the previous s and r.
             ^
factorizationFq.cpp:418:25: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
      if (factors.size() == k) return factors;
                         ^
factorizationFq.cpp:418:25: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
      if (factors.size() == k) return factors;
                         ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::pair<Fxelem, unsigned int> > factorizationCantorZassenhaus(const Fxelem&) [with Fxelem = Fpxelem]’:
factorizationFq.cpp:467:107:   required from here
factorizationFq.cpp:447:30: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
    auto aux2 = splitFactorsDD(elem.first, elem.second);
                              ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::pair<Fxelem, unsigned int> > factorizationCantorZassenhaus(const Fxelem&) [with Fxelem = Fpxelem]’:
factorizationFq.cpp:467:107:   required from here
factorizationFq.cpp:447:30: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
    auto aux2 = splitFactorsDD(elem.first, elem.second);
                              ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::pair<Fxelem, unsigned int> > squareFreeFF(Fxelem) [with Fxelem = Fqxelem]’:
factorizationFq.cpp:469:82:   required from here
factorizationFq.cpp:86:22: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
    for (int j = 0; j <= c.deg(); j+=p )
                      ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::pair<Fxelem, unsigned int> > squareFreeFF(Fxelem) [with Fxelem = Fqxelem]’:
factorizationFq.cpp:469:82:   required from here
factorizationFq.cpp:86:22: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
    for (int j = 0; j <= c.deg(); j+=p )
                      ^
factorizationFq.cpp:109:21: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
   for (int j = 0; j <= a.deg(); j+=p )
                     ^
factorizationFq.cpp:109:21: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
   for (int j = 0; j <= a.deg(); j+=p )
                     ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::pair<Fxelem, unsigned int> > partialFactorDD(Fxelem) [with Fxelem = Fqxelem]’:
factorizationFq.cpp:470:87:   required from here
factorizationFq.cpp:136:18: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int n = pol.deg();
                  ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::pair<Fxelem, unsigned int> > partialFactorDD(Fxelem) [with Fxelem = Fqxelem]’:
factorizationFq.cpp:470:87:   required from here
factorizationFq.cpp:136:18: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int n = pol.deg();
                  ^
factorizationFq.cpp:155:6: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] = aux[0]*mat[0][j] ;
      ^
factorizationFq.cpp:155:6: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] = aux[0]*mat[0][j] ;
      ^
factorizationFq.cpp:155:25: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] = aux[0]*mat[0][j] ;
                         ^
factorizationFq.cpp:157:6: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
      ^
factorizationFq.cpp:157:16: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
                ^
factorizationFq.cpp:157:23: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
                       ^
factorizationFq.cpp:157:26: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
                          ^
factorizationFq.cpp:155:25: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] = aux[0]*mat[0][j] ;
                         ^
factorizationFq.cpp:157:6: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
      ^
factorizationFq.cpp:157:16: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
                ^
factorizationFq.cpp:157:23: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
                       ^
factorizationFq.cpp:157:26: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     r[j] += aux[k]*mat[k][j];
                          ^
factorizationFq.cpp: In instantiation of ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fqxelem]’:
factorizationFq.cpp:471:74:   required from here
factorizationFq.cpp:228:23: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int polDeg = pol.deg();
                       ^
factorizationFq.cpp: In instantiation of ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fqxelem]’:
factorizationFq.cpp:471:74:   required from here
factorizationFq.cpp:228:23: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int polDeg = pol.deg();
                       ^
factorizationFq.cpp:237:74: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   std::vector<typename Fxelem::Felem> r(2*polDeg-1, pol.getField().get(0));
                                                                          ^
factorizationFq.cpp:237:74: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   std::vector<typename Fxelem::Felem> r(2*polDeg-1, pol.getField().get(0));
                                                                          ^
factorizationFq.cpp:238:3: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
  r[polDeg-1] = 1; //r == (0, 0, ..., 1)
   ^
factorizationFq.cpp:238:3: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
  r[polDeg-1] = 1; //r == (0, 0, ..., 1)
   ^
factorizationFq.cpp:241:15: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   auto aux = r[polDeg-1];
               ^
factorizationFq.cpp:241:15: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   auto aux = r[polDeg-1];
               ^
factorizationFq.cpp:243:5: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
     ^
factorizationFq.cpp:243:5: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
     ^
factorizationFq.cpp:243:12: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
            ^
factorizationFq.cpp:243:12: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
            ^
factorizationFq.cpp:246:4: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   r[i] = -1;
    ^
factorizationFq.cpp:246:4: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   r[i] = -1;
    ^
factorizationFq.cpp:248:4: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   r[i] = 0;
    ^
factorizationFq.cpp:248:4: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   r[i] = 0;
    ^
factorizationFq.cpp:258:28: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
     for (int i = polDeg; i <= aux.deg(); ++i){//aux.deg is always <= 2*polDeg-2
                            ^
factorizationFq.cpp:258:28: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
     for (int i = polDeg; i <= aux.deg(); ++i){//aux.deg is always <= 2*polDeg-2
                            ^
factorizationFq.cpp:260:34: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       aux += Fxelem(aux[i])*pwrsX[i-polDeg];
                                  ^
factorizationFq.cpp:260:34: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       aux += Fxelem(aux[i])*pwrsX[i-polDeg];
                                  ^
factorizationFq.cpp:266:26: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
    fastPowModPol<Fxelem> (v, (fastPow(pol.getField().getSize(), n) -1)/2, pwrsX, pol.deg());
                          ^
factorizationFq.cpp:266:26: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
    fastPowModPol<Fxelem> (v, (fastPow(pol.getField().getSize(), n) -1)/2, pwrsX, pol.deg());
                          ^
factorizationFq.cpp: In instantiation of ‘Fxelem randomPol(const typename Fxelem::F&, int) [with Fxelem = Fqxelem; typename Fxelem::F = Fq]’:
factorizationFq.cpp:472:73:   required from here
factorizationFq.cpp:213:87: error: conversion to ‘std::mersenne_twister_engine<long unsigned int, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::result_type {aka long unsigned int}’ from ‘std::chrono::duration<long int, std::ratio<1l, 1000000000l> >::rep {aka long int}’ may change the sign of the result [-Werror=sign-conversion]
  std::mt19937_64 generator(std::chrono::system_clock::now().time_since_epoch().count());
                                                                                       ^
factorizationFq.cpp: In instantiation of ‘Fxelem randomPol(const typename Fxelem::F&, int) [with Fxelem = Fqxelem; typename Fxelem::F = Fq]’:
factorizationFq.cpp:472:73:   required from here
factorizationFq.cpp:213:87: error: conversion to ‘std::mersenne_twister_engine<long unsigned int, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::result_type {aka long unsigned int}’ from ‘std::chrono::duration<long int, std::ratio<1l, 1000000000l> >::rep {aka long int}’ may change the sign of the result [-Werror=sign-conversion]
  std::mt19937_64 generator(std::chrono::system_clock::now().time_since_epoch().count());
                                                                                       ^
factorizationFq.cpp:216:3: error: conversion to ‘big_int {aka long long int}’ from ‘std::mersenne_twister_engine<long unsigned int, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::result_type {aka long unsigned int}’ may change the sign of the result [-Werror=sign-conversion]
   r.push_back(field.get(generator()));
   ^
factorizationFq.cpp:216:3: error: conversion to ‘big_int {aka long long int}’ from ‘std::mersenne_twister_engine<long unsigned int, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>::result_type {aka long unsigned int}’ may change the sign of the result [-Werror=sign-conversion]
   r.push_back(field.get(generator()));
   ^
factorizationFq.cpp: In instantiation of ‘std::vector<_RealType> berlekamp_simple(const Fxelem&) [with Fxelem = Fqxelem]’:
factorizationFq.cpp:473:69:   required from here
factorizationFq.cpp:405:18: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int n = pol.deg();
                  ^
factorizationFq.cpp: In instantiation of ‘std::vector<_RealType> berlekamp_simple(const Fxelem&) [with Fxelem = Fqxelem]’:
factorizationFq.cpp:473:69:   required from here
factorizationFq.cpp:405:18: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int n = pol.deg();
                  ^
factorizationFq.cpp:407:6: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
      ^
factorizationFq.cpp:407:6: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
      ^
factorizationFq.cpp:407:9: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
         ^
factorizationFq.cpp:407:9: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
         ^
factorizationFq.cpp:410:24: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
  while (factors.size() < k){
                        ^
factorizationFq.cpp:410:24: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
  while (factors.size() < k){
                        ^
factorizationFq.cpp:411:21: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
   for (int i = 0; i < factors.size(); ++i){
                     ^
factorizationFq.cpp:411:21: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
   for (int i = 0; i < factors.size(); ++i){
                     ^
factorizationFq.cpp:414:32: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     Fxelem g = gcd(v-s, factors[i]);
                                ^
factorizationFq.cpp:414:32: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     Fxelem g = gcd(v-s, factors[i]);
                                ^
factorizationFq.cpp:415:31: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     if (g != 1 && g != factors[i]){
                               ^
factorizationFq.cpp:415:31: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     if (g != 1 && g != factors[i]){
                               ^
factorizationFq.cpp:416:13: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      factors[i]/=g; //We continue in the loop with the new factors[i] because it is a divisor of the old factors[i] so it is not necessary to check the previous s and r.
             ^
factorizationFq.cpp:416:13: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      factors[i]/=g; //We continue in the loop with the new factors[i] because it is a divisor of the old factors[i] so it is not necessary to check the previous s and r.
             ^
factorizationFq.cpp:418:25: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
      if (factors.size() == k) return factors;
                         ^
factorizationFq.cpp:418:25: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
      if (factors.size() == k) return factors;
                         ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::pair<Fxelem, unsigned int> > factorizationCantorZassenhaus(const Fxelem&) [with Fxelem = Fqxelem]’:
factorizationFq.cpp:476:107:   required from here
factorizationFq.cpp:447:30: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
    auto aux2 = splitFactorsDD(elem.first, elem.second);
                              ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::pair<Fxelem, unsigned int> > factorizationCantorZassenhaus(const Fxelem&) [with Fxelem = Fqxelem]’:
factorizationFq.cpp:476:107:   required from here
factorizationFq.cpp:447:30: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
    auto aux2 = splitFactorsDD(elem.first, elem.second);
                              ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from factorizationFq.cpp:7:
polRing.hpp: In instantiation of ‘const Fxelem PolynomialRing<Fxelem, Felem>::derivative() const [with Fxelem = Fpxelem; Felem = Fpelem]’:
factorizationFq.cpp:67:26:   required from ‘std::vector<std::pair<Fxelem, unsigned int> > squareFreeFF(Fxelem) [with Fxelem = Fpxelem]’
factorizationFq.cpp:460:82:   required from here
polRing.hpp:249:25: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
            for(int i=1;i<v.size();++i)
                         ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from factorizationFq.cpp:7:
polRing.hpp: In instantiation of ‘const Fxelem PolynomialRing<Fxelem, Felem>::derivative() const [with Fxelem = Fpxelem; Felem = Fpelem]’:
factorizationFq.cpp:67:26:   required from ‘std::vector<std::pair<Fxelem, unsigned int> > squareFreeFF(Fxelem) [with Fxelem = Fpxelem]’
factorizationFq.cpp:460:82:   required from here
polRing.hpp:249:25: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
            for(int i=1;i<v.size();++i)
                         ^
polRing.hpp:250:17: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                v[i-1]=v[i]*i;
                 ^
polRing.hpp:250:24: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                v[i-1]=v[i]*i;
                        ^
polRing.hpp:250:17: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                v[i-1]=v[i]*i;
                 ^
polRing.hpp:250:24: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                v[i-1]=v[i]*i;
                        ^
polRing.hpp: In instantiation of ‘Felem& PolynomialRing<Fxelem, Felem>::operator[](int) [with Fxelem = Fpxelem; Felem = Fpelem]’:
factorizationFq.cpp:87:10:   required from ‘std::vector<std::pair<Fxelem, unsigned int> > squareFreeFF(Fxelem) [with Fxelem = Fpxelem]’
factorizationFq.cpp:460:82:   required from here
polRing.hpp:243:45: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
         Felem & operator[](int i) {return _v[i];}
                                             ^
polRing.hpp: In instantiation of ‘Felem& PolynomialRing<Fxelem, Felem>::operator[](int) [with Fxelem = Fpxelem; Felem = Fpelem]’:
factorizationFq.cpp:87:10:   required from ‘std::vector<std::pair<Fxelem, unsigned int> > squareFreeFF(Fxelem) [with Fxelem = Fpxelem]’
factorizationFq.cpp:460:82:   required from here
polRing.hpp:243:45: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
         Felem & operator[](int i) {return _v[i];}
                                             ^
factorizationFq.cpp: In instantiation of ‘matrix<typename Fxelem::Felem> formMatrix(const Fxelem&) [with Fxelem = Fpxelem; matrix<typename Fxelem::Felem> = std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >; typename Fxelem::Felem = Fpelem]’:
factorizationFq.cpp:137:23:   required from ‘std::vector<std::pair<Fxelem, unsigned int> > partialFactorDD(Fxelem) [with Fxelem = Fpxelem]’
factorizationFq.cpp:461:87:   required from here
factorizationFq.cpp:294:18: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int n = pol.deg();
                  ^
factorizationFq.cpp: In instantiation of ‘matrix<typename Fxelem::Felem> formMatrix(const Fxelem&) [with Fxelem = Fpxelem; matrix<typename Fxelem::Felem> = std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >; typename Fxelem::Felem = Fpelem]’:
factorizationFq.cpp:137:23:   required from ‘std::vector<std::pair<Fxelem, unsigned int> > partialFactorDD(Fxelem) [with Fxelem = Fpxelem]’
factorizationFq.cpp:461:87:   required from here
factorizationFq.cpp:294:18: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int n = pol.deg();
                  ^
factorizationFq.cpp:296:51: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
  std::vector<typename Fxelem::Felem> r(n, f.get(0));
                                                   ^
factorizationFq.cpp:296:51: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
  std::vector<typename Fxelem::Felem> r(n, f.get(0));
                                                   ^
factorizationFq.cpp:302:15: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   auto aux = r[n-1];
               ^
factorizationFq.cpp:302:15: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   auto aux = r[n-1];
               ^
factorizationFq.cpp:304:5: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
     ^
factorizationFq.cpp:304:5: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
     ^
factorizationFq.cpp:304:12: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
            ^
factorizationFq.cpp:304:12: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
            ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from factorizationFq.cpp:7:
polRing.hpp: In instantiation of ‘const Felem& PolynomialRing<Fxelem, Felem>::operator[](int) const [with Fxelem = Fpxelem; Felem = Fpelem]’:
factorizationFq.cpp:243:25:   required from ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fpxelem]’
factorizationFq.cpp:462:74:   required from here
polRing.hpp:242:57: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
         const Felem & operator[](int i) const {return _v[i];}
                                                         ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from factorizationFq.cpp:7:
polRing.hpp: In instantiation of ‘const Felem& PolynomialRing<Fxelem, Felem>::operator[](int) const [with Fxelem = Fpxelem; Felem = Fpelem]’:
factorizationFq.cpp:243:25:   required from ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fpxelem]’
factorizationFq.cpp:462:74:   required from here
polRing.hpp:242:57: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
         const Felem & operator[](int i) const {return _v[i];}
                                                         ^
factorizationFq.cpp: In instantiation of ‘void fastPowModPol(Fxelem&, big_int, std::vector<_RealType>, int) [with Fxelem = Fpxelem; big_int = long long int]’:
factorizationFq.cpp:266:26:   required from ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fpxelem]’
factorizationFq.cpp:462:74:   required from here
factorizationFq.cpp:187:38: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       aux += Fxelem(aux[i+deg])*pwrsX[i];
                                      ^
factorizationFq.cpp: In instantiation of ‘void fastPowModPol(Fxelem&, big_int, std::vector<_RealType>, int) [with Fxelem = Fpxelem; big_int = long long int]’:
factorizationFq.cpp:266:26:   required from ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fpxelem]’
factorizationFq.cpp:462:74:   required from here
factorizationFq.cpp:187:38: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       aux += Fxelem(aux[i+deg])*pwrsX[i];
                                      ^
factorizationFq.cpp:195:34: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       a += Fxelem(a[i+deg])*pwrsX[i];
                                  ^
factorizationFq.cpp:195:34: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       a += Fxelem(a[i+deg])*pwrsX[i];
                                  ^
factorizationFq.cpp:200:38: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       aux += Fxelem(aux[i+deg])*pwrsX[i];
                                      ^
factorizationFq.cpp:200:38: error: conversion to ‘std::vector<Fpxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       aux += Fxelem(aux[i+deg])*pwrsX[i];
                                      ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::vector<typename Fxelem::Felem, std::allocator<typename Fxelem::Felem> >, std::allocator<std::vector<typename Fxelem::Felem, std::allocator<typename Fxelem::Felem> > > > kernelBasis(matrix<typename Fxelem::Felem>&) [with Fxelem = Fpxelem; typename Fxelem::Felem = Fpelem; matrix<typename Fxelem::Felem> = std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >]’:
factorizationFq.cpp:408:33:   required from ‘std::vector<_RealType> berlekamp_simple(const Fxelem&) [with Fxelem = Fpxelem]’
factorizationFq.cpp:464:69:   required from here
factorizationFq.cpp:332:38: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   for (i = k; i < n && mat[(size_t)k][i] == 0 ; ++i);
                                      ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::vector<typename Fxelem::Felem, std::allocator<typename Fxelem::Felem> >, std::allocator<std::vector<typename Fxelem::Felem, std::allocator<typename Fxelem::Felem> > > > kernelBasis(matrix<typename Fxelem::Felem>&) [with Fxelem = Fpxelem; typename Fxelem::Felem = Fpelem; matrix<typename Fxelem::Felem> = std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >]’:
factorizationFq.cpp:408:33:   required from ‘std::vector<_RealType> berlekamp_simple(const Fxelem&) [with Fxelem = Fpxelem]’
factorizationFq.cpp:464:69:   required from here
factorizationFq.cpp:332:38: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   for (i = k; i < n && mat[(size_t)k][i] == 0 ; ++i);
                                      ^
factorizationFq.cpp:336:36: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    typename Fxelem::Felem inv = mat[k][i].inv();
                                    ^
factorizationFq.cpp:336:39: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    typename Fxelem::Felem inv = mat[k][i].inv();
                                       ^
factorizationFq.cpp:336:36: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    typename Fxelem::Felem inv = mat[k][i].inv();
                                    ^
factorizationFq.cpp:336:39: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    typename Fxelem::Felem inv = mat[k][i].inv();
                                       ^
factorizationFq.cpp:338:18: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     if (j==k) mat[j][i] = 1; //This is the pivot
                  ^
factorizationFq.cpp:338:21: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     if (j==k) mat[j][i] = 1; //This is the pivot
                     ^
factorizationFq.cpp:338:18: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     if (j==k) mat[j][i] = 1; //This is the pivot
                  ^
factorizationFq.cpp:338:21: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     if (j==k) mat[j][i] = 1; //This is the pivot
                     ^
factorizationFq.cpp:339:17: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                 ^
factorizationFq.cpp:339:20: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                    ^
factorizationFq.cpp:339:33: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                                 ^
factorizationFq.cpp:339:36: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                                    ^
factorizationFq.cpp:339:17: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                 ^
factorizationFq.cpp:339:20: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                    ^
factorizationFq.cpp:339:33: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                                 ^
factorizationFq.cpp:339:36: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                                    ^
factorizationFq.cpp:344:19: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                   ^
factorizationFq.cpp:344:22: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                      ^
factorizationFq.cpp:344:19: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                   ^
factorizationFq.cpp:344:22: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                      ^
factorizationFq.cpp:344:30: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                              ^
factorizationFq.cpp:344:33: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                                 ^
factorizationFq.cpp:344:30: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                              ^
factorizationFq.cpp:344:33: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                                 ^
factorizationFq.cpp:354:9: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
         ^
factorizationFq.cpp:354:9: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
         ^
factorizationFq.cpp:354:12: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
            ^
factorizationFq.cpp:354:22: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                      ^
factorizationFq.cpp:354:25: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                         ^
factorizationFq.cpp:354:32: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                                ^
factorizationFq.cpp:354:35: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                                   ^
factorizationFq.cpp:354:12: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
            ^
factorizationFq.cpp:354:22: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                      ^
factorizationFq.cpp:354:25: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                         ^
factorizationFq.cpp:354:32: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                                ^
factorizationFq.cpp:354:35: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                                   ^
factorizationFq.cpp:362:6: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
      ^
factorizationFq.cpp:362:6: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
      ^
factorizationFq.cpp:362:9: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
         ^
factorizationFq.cpp:370:11: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    if (mat[j][j] == 0) ++j; //The row is zero iff mat[j][j] == 0
           ^
factorizationFq.cpp:362:9: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
         ^
factorizationFq.cpp:370:11: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    if (mat[j][j] == 0) ++j; //The row is zero iff mat[j][j] == 0
           ^
factorizationFq.cpp:370:14: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    if (mat[j][j] == 0) ++j; //The row is zero iff mat[j][j] == 0
              ^
factorizationFq.cpp:370:14: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    if (mat[j][j] == 0) ++j; //The row is zero iff mat[j][j] == 0
              ^
factorizationFq.cpp:374:23: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   result.push_back(mat[j]);
                       ^
factorizationFq.cpp:374:23: error: conversion to ‘std::vector<std::vector<Fpelem>, std::allocator<std::vector<Fpelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   result.push_back(mat[j]);
                       ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from factorizationFq.cpp:7:
polRing.hpp: In instantiation of ‘const Fxelem PolynomialRing<Fxelem, Felem>::derivative() const [with Fxelem = Fqxelem; Felem = Fqelem]’:
factorizationFq.cpp:67:26:   required from ‘std::vector<std::pair<Fxelem, unsigned int> > squareFreeFF(Fxelem) [with Fxelem = Fqxelem]’
factorizationFq.cpp:469:82:   required from here
polRing.hpp:249:25: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
            for(int i=1;i<v.size();++i)
                         ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from factorizationFq.cpp:7:
polRing.hpp: In instantiation of ‘const Fxelem PolynomialRing<Fxelem, Felem>::derivative() const [with Fxelem = Fqxelem; Felem = Fqelem]’:
factorizationFq.cpp:67:26:   required from ‘std::vector<std::pair<Fxelem, unsigned int> > squareFreeFF(Fxelem) [with Fxelem = Fqxelem]’
factorizationFq.cpp:469:82:   required from here
polRing.hpp:249:25: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
            for(int i=1;i<v.size();++i)
                         ^
polRing.hpp:250:17: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                v[i-1]=v[i]*i;
                 ^
polRing.hpp:250:24: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                v[i-1]=v[i]*i;
                        ^
polRing.hpp:250:17: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                v[i-1]=v[i]*i;
                 ^
polRing.hpp:250:24: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                v[i-1]=v[i]*i;
                        ^
polRing.hpp: In instantiation of ‘Felem& PolynomialRing<Fxelem, Felem>::operator[](int) [with Fxelem = Fqxelem; Felem = Fqelem]’:
factorizationFq.cpp:87:10:   required from ‘std::vector<std::pair<Fxelem, unsigned int> > squareFreeFF(Fxelem) [with Fxelem = Fqxelem]’
factorizationFq.cpp:469:82:   required from here
polRing.hpp:243:45: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
         Felem & operator[](int i) {return _v[i];}
                                             ^
polRing.hpp: In instantiation of ‘Felem& PolynomialRing<Fxelem, Felem>::operator[](int) [with Fxelem = Fqxelem; Felem = Fqelem]’:
factorizationFq.cpp:87:10:   required from ‘std::vector<std::pair<Fxelem, unsigned int> > squareFreeFF(Fxelem) [with Fxelem = Fqxelem]’
factorizationFq.cpp:469:82:   required from here
polRing.hpp:243:45: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
         Felem & operator[](int i) {return _v[i];}
                                             ^
factorizationFq.cpp: In instantiation of ‘matrix<typename Fxelem::Felem> formMatrix(const Fxelem&) [with Fxelem = Fqxelem; matrix<typename Fxelem::Felem> = std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >; typename Fxelem::Felem = Fqelem]’:
factorizationFq.cpp:137:23:   required from ‘std::vector<std::pair<Fxelem, unsigned int> > partialFactorDD(Fxelem) [with Fxelem = Fqxelem]’
factorizationFq.cpp:470:87:   required from here
factorizationFq.cpp:294:18: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int n = pol.deg();
                  ^
factorizationFq.cpp: In instantiation of ‘matrix<typename Fxelem::Felem> formMatrix(const Fxelem&) [with Fxelem = Fqxelem; matrix<typename Fxelem::Felem> = std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >; typename Fxelem::Felem = Fqelem]’:
factorizationFq.cpp:137:23:   required from ‘std::vector<std::pair<Fxelem, unsigned int> > partialFactorDD(Fxelem) [with Fxelem = Fqxelem]’
factorizationFq.cpp:470:87:   required from here
factorizationFq.cpp:294:18: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
  int n = pol.deg();
                  ^
factorizationFq.cpp:296:51: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
  std::vector<typename Fxelem::Felem> r(n, f.get(0));
                                                   ^
factorizationFq.cpp:296:51: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
  std::vector<typename Fxelem::Felem> r(n, f.get(0));
                                                   ^
factorizationFq.cpp:302:15: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   auto aux = r[n-1];
               ^
factorizationFq.cpp:302:15: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   auto aux = r[n-1];
               ^
factorizationFq.cpp:304:5: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
     ^
factorizationFq.cpp:304:12: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
            ^
factorizationFq.cpp:304:5: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
     ^
factorizationFq.cpp:304:12: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘big_int {aka long long int}’ may change the sign of the result [-Werror=sign-conversion]
    r[j] = r[j-1]-aux*pol[j];
            ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from factorizationFq.cpp:7:
polRing.hpp: In instantiation of ‘const Felem& PolynomialRing<Fxelem, Felem>::operator[](int) const [with Fxelem = Fqxelem; Felem = Fqelem]’:
factorizationFq.cpp:243:25:   required from ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fqxelem]’
factorizationFq.cpp:471:74:   required from here
polRing.hpp:242:57: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
         const Felem & operator[](int i) const {return _v[i];}
                                                         ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from factorizationFq.cpp:7:
polRing.hpp: In instantiation of ‘const Felem& PolynomialRing<Fxelem, Felem>::operator[](int) const [with Fxelem = Fqxelem; Felem = Fqelem]’:
factorizationFq.cpp:243:25:   required from ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fqxelem]’
factorizationFq.cpp:471:74:   required from here
polRing.hpp:242:57: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
         const Felem & operator[](int i) const {return _v[i];}
                                                         ^
factorizationFq.cpp: In instantiation of ‘void fastPowModPol(Fxelem&, big_int, std::vector<_RealType>, int) [with Fxelem = Fqxelem; big_int = long long int]’:
factorizationFq.cpp:266:26:   required from ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fqxelem]’
factorizationFq.cpp:471:74:   required from here
factorizationFq.cpp:187:38: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       aux += Fxelem(aux[i+deg])*pwrsX[i];
                                      ^
factorizationFq.cpp: In instantiation of ‘void fastPowModPol(Fxelem&, big_int, std::vector<_RealType>, int) [with Fxelem = Fqxelem; big_int = long long int]’:
factorizationFq.cpp:266:26:   required from ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fqxelem]’
factorizationFq.cpp:471:74:   required from here
factorizationFq.cpp:187:38: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       aux += Fxelem(aux[i+deg])*pwrsX[i];
                                      ^
factorizationFq.cpp:195:34: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       a += Fxelem(a[i+deg])*pwrsX[i];
                                  ^
factorizationFq.cpp:195:34: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       a += Fxelem(a[i+deg])*pwrsX[i];
                                  ^
factorizationFq.cpp:200:38: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       aux += Fxelem(aux[i+deg])*pwrsX[i];
                                      ^
factorizationFq.cpp:200:38: error: conversion to ‘std::vector<Fqxelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
       aux += Fxelem(aux[i+deg])*pwrsX[i];
                                      ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::vector<typename Fxelem::Felem, std::allocator<typename Fxelem::Felem> >, std::allocator<std::vector<typename Fxelem::Felem, std::allocator<typename Fxelem::Felem> > > > kernelBasis(matrix<typename Fxelem::Felem>&) [with Fxelem = Fqxelem; typename Fxelem::Felem = Fqelem; matrix<typename Fxelem::Felem> = std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >]’:
factorizationFq.cpp:408:33:   required from ‘std::vector<_RealType> berlekamp_simple(const Fxelem&) [with Fxelem = Fqxelem]’
factorizationFq.cpp:473:69:   required from here
factorizationFq.cpp:332:38: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   for (i = k; i < n && mat[(size_t)k][i] == 0 ; ++i);
                                      ^
factorizationFq.cpp: In instantiation of ‘std::vector<std::vector<typename Fxelem::Felem, std::allocator<typename Fxelem::Felem> >, std::allocator<std::vector<typename Fxelem::Felem, std::allocator<typename Fxelem::Felem> > > > kernelBasis(matrix<typename Fxelem::Felem>&) [with Fxelem = Fqxelem; typename Fxelem::Felem = Fqelem; matrix<typename Fxelem::Felem> = std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >]’:
factorizationFq.cpp:408:33:   required from ‘std::vector<_RealType> berlekamp_simple(const Fxelem&) [with Fxelem = Fqxelem]’
factorizationFq.cpp:473:69:   required from here
factorizationFq.cpp:332:38: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   for (i = k; i < n && mat[(size_t)k][i] == 0 ; ++i);
                                      ^
factorizationFq.cpp:336:36: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    typename Fxelem::Felem inv = mat[k][i].inv();
                                    ^
factorizationFq.cpp:336:36: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    typename Fxelem::Felem inv = mat[k][i].inv();
                                    ^
factorizationFq.cpp:336:39: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    typename Fxelem::Felem inv = mat[k][i].inv();
                                       ^
factorizationFq.cpp:336:39: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    typename Fxelem::Felem inv = mat[k][i].inv();
                                       ^
factorizationFq.cpp:338:18: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     if (j==k) mat[j][i] = 1; //This is the pivot
                  ^
factorizationFq.cpp:338:21: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     if (j==k) mat[j][i] = 1; //This is the pivot
                     ^
factorizationFq.cpp:338:18: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     if (j==k) mat[j][i] = 1; //This is the pivot
                  ^
factorizationFq.cpp:338:21: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     if (j==k) mat[j][i] = 1; //This is the pivot
                     ^
factorizationFq.cpp:339:17: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                 ^
factorizationFq.cpp:339:20: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                    ^
factorizationFq.cpp:339:17: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                 ^
factorizationFq.cpp:339:20: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                    ^
factorizationFq.cpp:339:33: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                                 ^
factorizationFq.cpp:339:36: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                                    ^
factorizationFq.cpp:339:33: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                                 ^
factorizationFq.cpp:339:36: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
     else if (mat[j][i] != 0) mat[j][i] *= inv;
                                    ^
factorizationFq.cpp:344:19: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                   ^
factorizationFq.cpp:344:22: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                      ^
factorizationFq.cpp:344:19: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                   ^
factorizationFq.cpp:344:22: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                      ^
factorizationFq.cpp:344:30: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                              ^
factorizationFq.cpp:344:33: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                                 ^
factorizationFq.cpp:344:30: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                              ^
factorizationFq.cpp:344:33: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      std::swap(mat[j][k], mat[j][i]);
                                 ^
factorizationFq.cpp:354:9: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
         ^
factorizationFq.cpp:354:9: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
         ^
factorizationFq.cpp:354:12: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
            ^
factorizationFq.cpp:354:22: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                      ^
factorizationFq.cpp:354:25: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                         ^
factorizationFq.cpp:354:32: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                                ^
factorizationFq.cpp:354:35: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                                   ^
factorizationFq.cpp:362:6: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
      ^
factorizationFq.cpp:362:9: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
         ^
factorizationFq.cpp:370:11: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    if (mat[j][j] == 0) ++j; //The row is zero iff mat[j][j] == 0
           ^
factorizationFq.cpp:370:14: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    if (mat[j][j] == 0) ++j; //The row is zero iff mat[j][j] == 0
              ^
factorizationFq.cpp:354:12: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
            ^
factorizationFq.cpp:354:22: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                      ^
factorizationFq.cpp:354:25: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                         ^
factorizationFq.cpp:354:32: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                                ^
factorizationFq.cpp:354:35: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
      mat[j][i] -= mat[j][k]*mat[k][i];
                                   ^
factorizationFq.cpp:362:6: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
      ^
factorizationFq.cpp:362:9: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   mat[i][i] -= 1;
         ^
factorizationFq.cpp:370:11: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    if (mat[j][j] == 0) ++j; //The row is zero iff mat[j][j] == 0
           ^
factorizationFq.cpp:370:14: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
    if (mat[j][j] == 0) ++j; //The row is zero iff mat[j][j] == 0
              ^
factorizationFq.cpp:374:23: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   result.push_back(mat[j]);
                       ^
factorizationFq.cpp:374:23: error: conversion to ‘std::vector<std::vector<Fqelem>, std::allocator<std::vector<Fqelem> > >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
   result.push_back(mat[j]);
                       ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from factorizationFq.cpp:7:
polRing.hpp: In instantiation of ‘std::string to_string(const Fpxelem&)’:
polRing.hpp:93:112:   required from ‘Fxelem& PolynomialRing<Fxelem, Felem>::operator*=(const Fxelem&) [with Fxelem = Fpxelem; Felem = Fpelem]’
factorizationFq.cpp:256:8:   required from ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fpxelem]’
factorizationFq.cpp:462:74:   required from here
polRing.hpp:284:24: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                 if(f._v[i] != 0){
                        ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from factorizationFq.cpp:7:
polRing.hpp: In instantiation of ‘std::string to_string(const Fpxelem&)’:
polRing.hpp:93:112:   required from ‘Fxelem& PolynomialRing<Fxelem, Felem>::operator*=(const Fxelem&) [with Fxelem = Fpxelem; Felem = Fpelem]’
factorizationFq.cpp:256:8:   required from ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fpxelem]’
factorizationFq.cpp:462:74:   required from here
polRing.hpp:284:24: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                 if(f._v[i] != 0){
                        ^
polRing.hpp:286:28: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                     if(f._v[i] != 1)
                            ^
polRing.hpp:287:44: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                         s += to_string(f._v[i]);
                                            ^
polRing.hpp:286:28: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                     if(f._v[i] != 1)
                            ^
polRing.hpp:287:44: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                         s += to_string(f._v[i]);
                                            ^
polRing.hpp: In instantiation of ‘std::string to_string(const Fqxelem&)’:
polRing.hpp:93:112:   required from ‘Fxelem& PolynomialRing<Fxelem, Felem>::operator*=(const Fxelem&) [with Fxelem = Fqxelem; Felem = Fqelem]’
factorizationFq.cpp:256:8:   required from ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fqxelem]’
factorizationFq.cpp:471:74:   required from here
polRing.hpp:284:24: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                 if(f._v[i] != 0){
                        ^
polRing.hpp: In instantiation of ‘std::string to_string(const Fqxelem&)’:
polRing.hpp:93:112:   required from ‘Fxelem& PolynomialRing<Fxelem, Felem>::operator*=(const Fxelem&) [with Fxelem = Fqxelem; Felem = Fqelem]’
factorizationFq.cpp:256:8:   required from ‘std::vector<_RealType> splitFactorsDD(const Fxelem&, int) [with Fxelem = Fqxelem]’
factorizationFq.cpp:471:74:   required from here
polRing.hpp:284:24: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                 if(f._v[i] != 0){
                        ^
polRing.hpp:286:28: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                     if(f._v[i] != 1)
                            ^
polRing.hpp:287:44: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                         s += to_string(f._v[i]);
                                            ^
polRing.hpp:286:28: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                     if(f._v[i] != 1)
                            ^
polRing.hpp:287:44: error: conversion to ‘std::vector<Fqelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                         s += to_string(f._v[i]);
                                            ^
cc1plus: all warnings being treated as errors
cc1plus: all warnings being treated as errors
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE fpxelem.cpp -quiet -dumpbase fpxelem.cpp -mtune=generic -march=x86-64COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE fpxelem.cpp -quiet -dumpbase fpxelem.cpp -mtune=generic -march=x86-64 -auxbase fpxelem -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
 -auxbase fpxelem -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
Compiler executable checksum: Compiler executable checksum: 18422b8e6e00646fd4f8fbf484d27148
18422b8e6e00646fd4f8fbf484d27148
In file included from zxelem.hpp:5:0,
                 from fpxelem.hpp:8,
                 from fpxelem.cpp:1:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from zxelem.hpp:5:0,
                 from fpxelem.hpp:8,
                 from fpxelem.cpp:1:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from fpxelem.hpp:8:0,
                 from fpxelem.cpp:1:
zxelem.hpp:30:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const big_int unit(const Zxelem &e);
                                   ^
In file included from fpxelem.hpp:8:0,
                 from fpxelem.cpp:1:
zxelem.hpp:30:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const big_int unit(const Zxelem &e);
                                   ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from fpxelem.cpp:1:
polRing.hpp: In instantiation of ‘std::string to_string(const Fpxelem&)’:
polRing.hpp:50:107:   required from ‘Fxelem& PolynomialRing<Fxelem, Felem>::operator+=(const Fxelem&) [with Fxelem = Fpxelem; Felem = Fpelem]’
polRing.hpp:83:49:   required from ‘Fxelem& PolynomialRing<Fxelem, Felem>::operator-=(const Fxelem&) [with Fxelem = Fpxelem; Felem = Fpelem]’
polRing.hpp:87:62:   required from ‘const Fxelem PolynomialRing<Fxelem, Felem>::operator-(const Fxelem&) const [with Fxelem = Fpxelem; Felem = Fpelem]’
fpxelem.cpp:37:27:   required from here
polRing.hpp:284:24: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                 if(f._v[i] != 0){
                        ^
In file included from zxelem.hpp:7:0,
                 from fpxelem.hpp:8,
                 from fpxelem.cpp:1:
polRing.hpp: In instantiation of ‘std::string to_string(const Fpxelem&)’:
polRing.hpp:50:107:   required from ‘Fxelem& PolynomialRing<Fxelem, Felem>::operator+=(const Fxelem&) [with Fxelem = Fpxelem; Felem = Fpelem]’
polRing.hpp:83:49:   required from ‘Fxelem& PolynomialRing<Fxelem, Felem>::operator-=(const Fxelem&) [with Fxelem = Fpxelem; Felem = Fpelem]’
polRing.hpp:87:62:   required from ‘const Fxelem PolynomialRing<Fxelem, Felem>::operator-(const Fxelem&) const [with Fxelem = Fpxelem; Felem = Fpelem]’
fpxelem.cpp:37:27:   required from here
polRing.hpp:284:24: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                 if(f._v[i] != 0){
                        ^
polRing.hpp:286:28: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                     if(f._v[i] != 1)
                            ^
polRing.hpp:287:44: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                         s += to_string(f._v[i]);
                                            ^
polRing.hpp:286:28: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                     if(f._v[i] != 1)
                            ^
polRing.hpp:287:44: error: conversion to ‘std::vector<Fpelem>::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
                         s += to_string(f._v[i]);
                                            ^
cc1plus: all warnings being treated as errors
cc1plus: all warnings being treated as errors
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE zxelem.cpp -quiet -dumpbase zxelem.cpp -mtune=generic -march=x86-64 -auxbase zxelem -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE zxelem.cpp -quiet -dumpbase zxelem.cpp -mtune=generic -march=x86-64 -auxbase zxelem -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
Compiler executable checksum: Compiler executable checksum: 18422b8e6e00646fd4f8fbf484d27148
18422b8e6e00646fd4f8fbf484d27148
In file included from zxelem.hpp:5:0,
                 from zxelem.cpp:1:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from zxelem.hpp:5:0,
                 from zxelem.cpp:1:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from zxelem.cpp:1:0:
zxelem.hpp:30:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const big_int unit(const Zxelem &e);
                                   ^
In file included from zxelem.cpp:1:0:
zxelem.hpp:30:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const big_int unit(const Zxelem &e);
                                   ^
zxelem.cpp: In lambda function:
zxelem.cpp:17:69: error: use of old-style cast [-Werror=old-style-cast]
             [&p, &p2](const Fpelem &e) -> big_int { return (big_int)e <= p2 ? (big_int)e : (big_int)e-p; });
                                                                     ^
zxelem.cpp: In lambda function:
zxelem.cpp:17:69: error: use of old-style cast [-Werror=old-style-cast]
             [&p, &p2](const Fpelem &e) -> big_int { return (big_int)e <= p2 ? (big_int)e : (big_int)e-p; });
                                                                     ^
zxelem.cpp:17:88: error: use of old-style cast [-Werror=old-style-cast]
             [&p, &p2](const Fpelem &e) -> big_int { return (big_int)e <= p2 ? (big_int)e : (big_int)e-p; });
                                                                                        ^
zxelem.cpp:17:101: error: use of old-style cast [-Werror=old-style-cast]
             [&p, &p2](const Fpelem &e) -> big_int { return (big_int)e <= p2 ? (big_int)e : (big_int)e-p; });
                                                                                                     ^
zxelem.cpp:17:88: error: use of old-style cast [-Werror=old-style-cast]
             [&p, &p2](const Fpelem &e) -> big_int { return (big_int)e <= p2 ? (big_int)e : (big_int)e-p; });
                                                                                        ^
zxelem.cpp:17:101: error: use of old-style cast [-Werror=old-style-cast]
             [&p, &p2](const Fpelem &e) -> big_int { return (big_int)e <= p2 ? (big_int)e : (big_int)e-p; });
                                                                                                     ^
zxelem.cpp: At global scope:
zxelem.cpp:28:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const big_int unit(const Zxelem &e){
                                   ^
zxelem.cpp: At global scope:
zxelem.cpp:28:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const big_int unit(const Zxelem &e){
                                   ^
zxelem.cpp: In function ‘big_int normInf(const Zxelem&)’:
zxelem.cpp:37:15: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
         if(e[i] > ret)
               ^
zxelem.cpp: In function ‘big_int normInf(const Zxelem&)’:
zxelem.cpp:37:15: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
         if(e[i] > ret)
               ^
zxelem.cpp:38:22: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
             ret = e[i];
                      ^
zxelem.cpp:38:22: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
             ret = e[i];
                      ^
zxelem.cpp: In function ‘big_int content(const Zxelem&)’:
zxelem.cpp:45:29: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
         gcdE = gcd(gcdE, e[i]);
                             ^
zxelem.cpp: In function ‘big_int content(const Zxelem&)’:
zxelem.cpp:45:29: error: conversion to ‘int’ from ‘unsigned int’ may change the sign of the result [-Werror=sign-conversion]
         gcdE = gcd(gcdE, e[i]);
                             ^
In file included from fpxelem.hpp:9:0,
                 from zxelem.hpp:6,
                 from zxelem.cpp:1:
polRing.hpp: In instantiation of ‘const Felem& PolynomialRing<Fxelem, Felem>::operator[](int) const [with Fxelem = Zxelem; Felem = long long int]’:
zxelem.cpp:35:22:   required from here
polRing.hpp:242:57: error: conversion to ‘std::vector<long long int, std::allocator<long long int> >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
         const Felem & operator[](int i) const {return _v[i];}
                                                         ^
In file included from fpxelem.hpp:9:0,
                 from zxelem.hpp:6,
                 from zxelem.cpp:1:
polRing.hpp: In instantiation of ‘const Felem& PolynomialRing<Fxelem, Felem>::operator[](int) const [with Fxelem = Zxelem; Felem = long long int]’:
zxelem.cpp:35:22:   required from here
polRing.hpp:242:57: error: conversion to ‘std::vector<long long int, std::allocator<long long int> >::size_type {aka long unsigned int}’ from ‘int’ may change the sign of the result [-Werror=sign-conversion]
         const Felem & operator[](int i) const {return _v[i];}
                                                         ^
cc1plus: all warnings being treated as errors
cc1plus: all warnings being treated as errors
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
COLLECT_GCC_OPTIONS='-v' '-std=c++11' '-I' './' '-Wpedantic' '-Wall' '-Wsign-conversion' '-Wextra' '-Wcast-align' '-Wcast-qual' '-Wctor-dtor-privacy' '-Wdisabled-optimization' '-Wformat=2' '-Winit-self' '-Wlogical-op' '-Wmissing-declarations' '-Wmissing-include-dirs' '-Wnoexcept' '-Wold-style-cast' '-Woverloaded-virtual' '-Wredundant-decls' '-Wsign-promo' '-Wstrict-null-sentinel' '-Wstrict-overflow=5' '-Wswitch-default' '-Wundef' '-Werror' '-Wno-unused' '-std=c++11' '-shared-libgcc' '-mtune=generic' '-march=x86-64'
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE zelem.cpp -quiet -dumpbase zelem.cpp -mtune=generic -march=x86-64 -auxbase zelem -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/cc1plus -quiet -v -I ./ -D_GNU_SOURCE zelem.cpp -quiet -dumpbase zelem.cpp -mtune=generic -march=x86-64 -auxbase zelem -Wpedantic -Wall -Wsign-conversion -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused -std=c++11 -std=c++11 -version -o /tmp/ccwniiN9.s
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
ignoring nonexistent directory "/usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../x86_64-unknown-linux-gnu/include"
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
#include "..." search starts here:
#include <...> search starts here:
 ./
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/x86_64-unknown-linux-gnu
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/../../../../include/c++/5.2.0/backward
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/5.2.0/include-fixed
 /usr/include
End of search list.
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
GNU C++11 (GCC) version 5.2.0 (x86_64-unknown-linux-gnu)
	compiled by GNU C version 5.2.0, GMP version 6.0.0, MPFR version 3.1.3-p4, MPC version 1.0.3
warning: GMP header version 6.0.0 differs from library version 6.1.0.
GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
Compiler executable checksum: 18422b8e6e00646fd4f8fbf484d27148
Compiler executable checksum: 18422b8e6e00646fd4f8fbf484d27148
In file included from zelem.cpp:4:0:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
In file included from zelem.cpp:4:0:
zelem.hpp:15:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e);
                   ^
zelem.cpp: In function ‘long long int add(long long int, long long int, long long int)’:
zelem.cpp:11:46: error: use of old-style cast [-Werror=old-style-cast]
     return (long long)(((unsigned long long) a + (unsigned long long) b) % p);
                                              ^
zelem.cpp: In function ‘long long int add(long long int, long long int, long long int)’:
zelem.cpp:11:46: error: use of old-style cast [-Werror=old-style-cast]
     return (long long)(((unsigned long long) a + (unsigned long long) b) % p);
                                              ^
zelem.cpp:11:71: error: use of old-style cast [-Werror=old-style-cast]
     return (long long)(((unsigned long long) a + (unsigned long long) b) % p);
                                                                       ^
zelem.cpp:11:76: error: conversion to ‘long long unsigned int’ from ‘long long int’ may change the sign of the result [-Werror=sign-conversion]
     return (long long)(((unsigned long long) a + (unsigned long long) b) % p);
                                                                            ^
zelem.cpp:11:77: error: use of old-style cast [-Werror=old-style-cast]
     return (long long)(((unsigned long long) a + (unsigned long long) b) % p);
                                                                             ^
zelem.cpp:11:71: error: use of old-style cast [-Werror=old-style-cast]
     return (long long)(((unsigned long long) a + (unsigned long long) b) % p);
                                                                       ^
zelem.cpp:11:76: error: conversion to ‘long long unsigned int’ from ‘long long int’ may change the sign of the result [-Werror=sign-conversion]
     return (long long)(((unsigned long long) a + (unsigned long long) b) % p);
                                                                            ^
zelem.cpp:11:77: error: use of old-style cast [-Werror=old-style-cast]
     return (long long)(((unsigned long long) a + (unsigned long long) b) % p);
                                                                             ^
zelem.cpp: In function ‘long long int russianPeasantMultiplication(long long int, long long int, long long int)’:
zelem.cpp:26:33: error: conversion to ‘long long unsigned int’ from ‘long long int’ may change the sign of the result [-Werror=sign-conversion]
         if (a & 1) res = (res + b) % p;
                                 ^
zelem.cpp: In function ‘long long int russianPeasantMultiplication(long long int, long long int, long long int)’:
zelem.cpp:26:33: error: conversion to ‘long long unsigned int’ from ‘long long int’ may change the sign of the result [-Werror=sign-conversion]
         if (a & 1) res = (res + b) % p;
                                 ^
zelem.cpp:26:38: error: conversion to ‘long long unsigned int’ from ‘long long int’ may change the sign of the result [-Werror=sign-conversion]
         if (a & 1) res = (res + b) % p;
                                      ^
zelem.cpp:30:24: error: use of old-style cast [-Werror=old-style-cast]
     return (long long) res;
                        ^
zelem.cpp:26:38: error: conversion to ‘long long unsigned int’ from ‘long long int’ may change the sign of the result [-Werror=sign-conversion]
         if (a & 1) res = (res + b) % p;
                                      ^
zelem.cpp:30:24: error: use of old-style cast [-Werror=old-style-cast]
     return (long long) res;
                        ^
zelem.cpp: At global scope:
zelem.cpp:42:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e){
                   ^
zelem.cpp: At global scope:
zelem.cpp:42:19: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 const int unit(T e){
                   ^
zelem.cpp: In function ‘T getZero(T)’:
zelem.cpp:50:27: error: use of old-style cast [-Werror=old-style-cast]
 T getZero(T e){ return (T)0;}
                           ^
zelem.cpp: In function ‘T getZero(T)’:
zelem.cpp:50:27: error: use of old-style cast [-Werror=old-style-cast]
 T getZero(T e){ return (T)0;}
                           ^
zelem.cpp: In function ‘T getOne(T)’:
zelem.cpp:52:26: error: use of old-style cast [-Werror=old-style-cast]
 T getOne(T e){ return (T)1;}
                          ^
zelem.cpp: In function ‘T getOne(T)’:
zelem.cpp:52:26: error: use of old-style cast [-Werror=old-style-cast]
 T getOne(T e){ return (T)1;}
                          ^
zelem.cpp: At global scope:
zelem.cpp:56:43: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 template const int unit<big_int>(big_int e);
                                           ^
zelem.cpp: At global scope:
zelem.cpp:56:43: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 template const int unit<big_int>(big_int e);
                                           ^
zelem.cpp:57:53: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 template const big_int normalForm<big_int>(big_int e);
                                                     ^
zelem.cpp:57:53: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 template const big_int normalForm<big_int>(big_int e);
                                                     ^
zelem.cpp:62:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 template const int unit<int>(int e);
                                   ^
zelem.cpp:62:35: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 template const int unit<int>(int e);
                                   ^
zelem.cpp:63:41: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 template const int normalForm<int>(int e);
                                         ^
zelem.cpp:63:41: error: type qualifiers ignored on function return type [-Werror=ignored-qualifiers]
 template const int normalForm<int>(int e);
                                         ^
cc1plus: all warnings being treated as errors
cc1plus: all warnings being treated as errors
